openapi: 3.0.0
info:
  version: 1.0.0
  title: voting-relayer
  description: ''
servers:
  - url: 'https://api.demo.tokend.io'
    description: TokenD Developer Environment
paths:
  /integrations/registration-relayer/v1/vote:
    post:
      tags:
        - Voting
      summary: Voting
      operationId: vote
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/SendTx'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/TxKey'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
components:
  schemas:
    Errors:
      description: 'Standard JSON:API error'
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          description: Non empty array of errors occurred during request processing
          items:
            type: object
            required:
              - title
              - status
            properties:
              title:
                type: string
                description: 'Title is a short, human-readable summary of the problem'
                example: Bad Request
              detail:
                type: string
                description: Detail is a human-readable explanation specific to this occurrence of the problem
                example: Request body was expected
              status:
                type: integer
                description: Status is the HTTP status code applicable to this problem
                example: 400
                enum:
                  - 400
                  - 401
                  - 403
                  - 404
                  - 409
                  - 429
                  - 500
    SendTx:
      allOf:
        - $ref: '#/components/schemas/SendTxKey'
        - type: object
          x-go-is-request: true
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - tx_data
                - destination
                - proposal_id
              properties:
                tx_data:
                  type: string
                  pattern: '^0x[0-9a-fA-F]+$'
                  example: '0xdeadbeafdeadbeafdeadbeaf'
                  description: Serialized transaction data
                destination:
                  type: string
                  pattern: '^0x[0-9a-fA-F]{40}'
                  example: 0xdead...beaf
                  description: Address of the contract to which the transaction data should be sent
                proposal_id:
                  type: string
                  example: 341241234142412340000
    SendTxKey:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - send_transaction
    TxKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: 0xdead...beaf
          description: Transaction hash
        type:
          type: string
          enum:
            - transaction
  parameters:
    pageLimitParam:
      in: query
      name: 'page[limit]'
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 15
        description: Numbers of items per page to return.
    pageNumberParam:
      in: query
      name: 'page[number]'
      required: false
      schema:
        type: integer
      description: The number of a page to return.
    sortingParam:
      in: query
      name: 'page[order]'
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
        description: 'Order of records on the page. If sortingParam is not specified, order of records is by default sorted by ID.'
